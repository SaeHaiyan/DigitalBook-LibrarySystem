@model IEnumerable<RiddlesWebApp.Models.Riddle>

@{
    ViewData["Title"] = "Book List";
}

<!-- Page-specific styles -->
<style>
    body {
        font-family: 'Montserrat', sans-serif; /* Set Montserrat as the page font */
        background-color: #895129; /* Dark brown background color */
        color: white; /* Text color for readability */
    }

    .card {
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        background-color: #B5C18E; /* Updated card background color */
    }

    .card-title {
        font-size: 1.2rem;
        font-weight: bold;
        color: black; /* Card title color */
    }

    .card-text {
        font-size: 1rem;
        color: #555;
    }

    /* Ensure Add Book button color is black */
    a.btn.btn-primary {
        background-color: #000 !important; /* Black background for "Add Book" */
        border-color: #000 !important; /* Black border */
        color: #fff !important; /* White text color */
        width: 150px; /* Increased button width */
        text-align: center; /* Center text */
    }

    .btn {
        background-color: #384B70 !important; /* Default button color */
        border-color: #384B70 !important; /* Border color */
        color: #fff !important; /* Text color */
        width: 100%; /* Full width of the button within its container */
        padding: 10px 0; /* Space inside the button */
        font-size: 1rem; /* Font size for button text */
        border-radius: 5px; /* Slightly rounded corners */
        transition: all 0.3s ease; /* Smooth transition for hover effect */
    }

        .btn:hover {
            background-color: #2E3C5A !important; /* Darker shade on hover */
            border-color: #2E3C5A !important; /* Darker border on hover */
            transform: scale(1.05); /* Slightly enlarge the button on hover */
        }

    /* Update button color to black for Edit, View, Delete */
    .btn-container .btn {
        background-color: #000 !important; /* Black color for buttons */
        border-color: #000 !important; /* Black border */
        color: #fff !important; /* White text */
    }

        .btn-container .btn:hover {
            background-color: #333 !important; /* Darker black on hover */
            border-color: #333 !important; /* Darker black border on hover */
        }

    .btn-container {
        display: flex;
        justify-content: space-between; /* Space between buttons */
        gap: 8px; /* Space between buttons */
    }

    /* Flexbox layout for title, Add Book button, Search bar, and Sort Dropdown */
    .header-row {
        display: flex;
        justify-content: space-between; /* Place space between title and Add Book button */
        align-items: center; /* Vertically center items */
        margin-bottom: 20px; /* Space below header */
        margin-top: 30px; /* Added space above the title */
    }

        .header-row h1 {
            margin: 0; /* Remove default margin for h1 */
        }

    /* Search box and sort dropdown styles */
    .search-container, .sort-container {
        width: 48%; /* Reduced width for search bar and sort dropdown */
        margin: 5px 0;
    }

        .search-container input, .sort-container select {
            padding: 10px;
            font-size: 1rem;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%; /* Full width of the container */
        }

    /* Add some space below the search bar and sort dropdown */
    .search-sort-container {
        margin-top: 20px; /* Space between search and sort */
        margin-bottom: 20px; /* Space below sort bar */
        display: flex;
        justify-content: space-between;
    }

    /* Align "Add Book" button to the right */
    .add-book-container {
        display: flex;
        justify-content: flex-end; /* Align the Add Book button to the right */
        margin-bottom: 10px; /* Space below the button */
    }

    /* Styling for the Return to Top Button */
    .return-to-top {
        position: fixed;
        bottom: 30px;
        right: 30px;
        background-color: #B5C18E; /* Set the color to B5C18E */
        color: white;
        border: none;
        border-radius: 50%;
        padding: 15px;
        font-size: 18px;
        cursor: pointer;
        z-index: 10;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        width: 50px;
        height: 50px;
        display: none; /* Hide by default */
        justify-content: center;
        align-items: center;
    }

        .return-to-top:hover {
            background-color: #A4B88E; /* Slightly darker shade for hover effect */
        }

        .return-to-top span {
            color: black; /* Set arrow icon color to black */
        }

    /* No book found message */
    .no-books-found {
        text-align: center;
        color: #fff;
        font-size: 1.2rem;
        margin-top: 20px;
    }
</style>

<!-- Title and Add Book Button -->
<div class="header-row">
    <h1>Book List</h1>
    <div class="add-book-container">
        <a asp-action="Create" class="btn btn-primary">Add Book</a>
    </div>
</div>

<!-- Search Box and Sort Dropdown below the Add Book button -->
<div class="search-sort-container">
    <div class="search-container">
        <input type="text" id="searchInput" onkeyup="searchBooks()" placeholder="Search for books..." />
    </div>
    <div class="sort-container">
        <select id="sortOrder" onchange="sortBooks()">
            <option value="">Sort by</option>
            <option value="alphabetical">Alphabetically</option>
            <option value="genre">Genre</option>
        </select>
    </div>
</div>

<!-- Card Layout -->
<div class="row" id="bookList">
    @foreach (var item in Model)
    {
        <div class="col-md-4 mb-4 book-card">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@item.Question</h5>
                    <p class="card-text">@item.Answer</p>

                    <!-- Button row -->
                    <div class="btn-container">
                        <a asp-action="Edit" asp-route-id="@item.id" class="btn">Edit</a>
                        <a asp-action="Details" asp-route-id="@item.id" class="btn">Details</a>
                        <a asp-action="Delete" asp-route-id="@item.id" class="btn">Delete</a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- No Books Found Message (Initially hidden) -->
<div id="noBooksFound" class="no-books-found" style="display:none;">
    No books found.
</div>

<!-- Return to Top Button -->
<button class="return-to-top" onclick="window.scrollTo({top: 0, behavior: 'smooth'});">
    <span>&#8593;</span> <!-- Arrow icon now inside a span tag to color it black -->
</button>

<!-- JavaScript for Search and Sort Functionality -->
<script>
    function searchBooks() {
        var input, filter, cards, title, text, i, txtValue;
        input = document.getElementById("searchInput");
        filter = input.value.toUpperCase();
        cards = document.getElementsByClassName("book-card");
        var noBooksFoundMessage = document.getElementById("noBooksFound");
        var cardsVisible = false;

        // Loop through all cards and hide those that don't match the search
        for (i = 0; i < cards.length; i++) {
            title = cards[i].getElementsByClassName("card-title")[0];
            text = cards[i].getElementsByClassName("card-text")[0];
            if (title && text) {
                txtValue = title.textContent || title.innerText;
                txtValue += " " + (text.textContent || text.innerText);
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    cards[i].style.display = "";
                    cardsVisible = true;
                } else {
                    cards[i].style.display = "none";
                }
            }
        }

        // Show the "No book found" message if no cards are visible
        if (!cardsVisible) {
            noBooksFoundMessage.style.display = "block";
        } else {
            noBooksFoundMessage.style.display = "none";
        }
    }

    function sortBooks() {
        var sortOption = document.getElementById("sortOrder").value;
        var cards = Array.from(document.getElementsByClassName("book-card"));
        var sortedCards;

        if (sortOption === "alphabetical") {
            sortedCards = cards.sort((a, b) => {
                var titleA = a.getElementsByClassName("card-title")[0].innerText.toUpperCase();
                var titleB = b.getElementsByClassName("card-title")[0].innerText.toUpperCase();
                return titleA.localeCompare(titleB);
            });
        } else if (sortOption === "genre") {
            sortedCards = cards.sort((a, b) => {
                var genreA = a.getElementsByClassName("card-text")[0].innerText.toUpperCase(); // Assuming genre is in card-text
                var genreB = b.getElementsByClassName("card-text")[0].innerText.toUpperCase();
                return genreA.localeCompare(genreB);
            });
        } else {
            return; // No sorting selected
        }

        // Reorder the cards on the page
        var parent = document.getElementById("bookList");
        sortedCards.forEach(card => parent.appendChild(card)); // Append sorted cards
    }

    // Show return-to-top button when scrolled to the bottom of the page
    window.onscroll = function() {
        var button = document.querySelector('.return-to-top');
        if (document.body.scrollTop > 100 || document.documentElement.scrollTop > 100) {
            button.style.display = "block"; // Show button after scroll
        } else {
            button.style.display = "none"; // Hide button when at the top
        }
    };
</script>
